apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -10000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
distances <- read_rds("inst/extdata/MDG.1.b.n500m50.rds")
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,10]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
tour
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
R
gtz <- as_tibble(which(R >= -10000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta)) # +1 to allow zero delta a change
gtz
gtz <- as_tibble(which(R >= -10000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/100)) # +1 to allow zero delta a change
gtz
gtz <- as_tibble(which(R >= -10000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
gtz
distances <- read_rds("inst/extdata/MDG.1.b.n500m50.rds")
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,10]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -10000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,10]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -1000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/100)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -1000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -1000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -1000, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -100, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -100, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -100, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:100){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
tour <- tibble(N = 1:500, Vetor = rst$vectors[,5]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:1000){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/10)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
tour <- tibble(N = 1:500, Vetor = rst$vectors[,1]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:1000){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
tour <- tibble(N = 1:500, Vetor = rst$vectors[,1]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:1000){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
for (j in 1:5000){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
library(brkga)
library(brkga)
dm <- read_rds("inst/extdata/MDG.16.b.n500m50.rds")
dist_matrix <- read_rds("inst/extdata/MDG.1.a.n500m50.rds")
dist_matrix <- read_rds("inst/extdata/MDG.1.a.n500m50.rds")
rst <- mdp_brkgaBackShuffle(DistanceMatrix = dist_matrix,
m = 50,
LS_INTVL = 1,
K = 8,
GEN_INTVL = 1,
MAX_TIME = 10,
MAX_GENS = 1000,
RESET_AFTER = 10,
rngSeed = as.integer(Sys.time()),
THREADS = 8, verbose = 2)
rst <- mdp_brkgaBackShuffle(DistanceMatrix = dist_matrix,
m = 50,
LS_INTVL = 1,
K = 8,
GEN_INTVL = 20,
MAX_TIME = 30,
MAX_GENS = 1000,
RESET_AFTER = 100,
rngSeed = as.integer(Sys.time()),
THREADS = 8, verbose = 2)
rst <- mdp_brkga(DistanceMatrix = dist_matrix,
m = 50,
LS_INTVL = 1,
K = 8,
GEN_INTVL = 20,
MAX_TIME = 30,
MAX_GENS = 1000,
RESET_AFTER = 100,
rngSeed = as.integer(Sys.time()),
THREADS = 8, verbose = 2)
rst <- mdp_brkga(DistanceMatrix = dist_matrix,
m = 50,
LS_INTVL = 1,
K = 8,
GEN_INTVL = 20,
MAX_TIME = 30,
MAX_GENS = 1000,
RESET_AFTER = 100,
rngSeed = as.integer(Sys.time()),
THREADS = 8, verbose = 2)
rst <- mdp_brkga(DistanceMatrix = dist_matrix,
m = 50,
LS_INTVL = 1,
K = 8,
GEN_INTVL = 20,
MAX_TIME = 30,
MAX_GENS = 1000,
RESET_AFTER = 100,
rngSeed = as.integer(Sys.time()),
THREADS = 8, verbose = 2)
distances <- read_rds("inst/extdata/MDG.1.b.n500m50.rds")
DtM <- (distances - min(distances))/(max(distances) - min(distances))
rst <- eigen(DtM, symmetric = TRUE)
tour <- tibble(N = 1:500, Vetor = rst$vectors[,1]) %>% top_n(50) %>% select(N) %>% unlist(use.names = FALSE)
nontour <- setdiff(1:N, tour)
v <- matrix(c(rep(1,M), rep(0,N-M)), ncol = 1)
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distM[1:M, 1:M])/2)
for (j in 1:5000){
G <- distM %*% v
R <- distM[1:M, (M+1):N] %>%
apply(2, function(x){-x - G[1:M]}) %>%
apply(1, function(x){x + G[(M+1):N]}) %>% t
gtz <- as_tibble(which(R >= -500, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = exp(delta/1000)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
#OutIn <- gtz %>% top_n(10, delta)
#OutIn
aux <- tour[OutIn$row]
#sair <- sample(1:50,1)
#aux <- tour[sair]
#tour[sair] <- nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
distM <- distances[c(tour, nontour), c(tour, nontour)]
cat("\nFitness: ", round(sum(distM[1:M, 1:M])/2, 1), " Delta: ", OutIn$delta)
}
