library(brkga)
api_usage()
library(brkga)
brkga::api_usage()
system.file("data", "a280.tsp", package = "brkga")
system.file("extdata", "a280.tsp", package = "brkga")
library(brkga)
system.file("extdata", "a280.tsp", package = "brkga")
tsp_brkga(instanceFile = system.file("extdata", "a280.tsp", package = "brkga"))
install.packages("drat")
drat::addRepo("daqana")
install.packages("RcppArrayFire", configure.args = "--with-arrayfire=/opt/arrayfire")
install.packages("RcppArrayFire")
install.packages("RcppArrayFire", configure.args = "--with-arrayfire=/opt/arrayfire")
install.packages("RcppArrayFire", configure.args = "--with-arrayfire=/opt/arrayfire")
install.packages("RcppArrayFire", configure.args = "--with-arrayfire=/opt/arrayfire")
drat::addRepo("daqana")
install.packages("RcppArrayFire", configure.args = "--with-arrayfire=/opt/arrayfire")
install.packages("RcppArrayFire", configure.args = "--with-arrayfire=/opt/arrayfire")
devtools::load_all(".")
library(brkga)
brkga::api_usage()
install.packages("RcppXPtrUtils")
library(brkga)
brkga::nonlinear_brkga()
devtools::load_all(".")
library(brkga)
brkga::nonlinear_brkga()
library(brkga)
brkga::nonlinear_brkga()
library(brkga)
brkga::nonlinear_brkga()
rst <- brkga::nonlinear_brkga()
rst$point
rst$point %>% length()
library(tidyverse)
rst$point %>% length()
rst$point*1:10
sum(rst$point*1:10)
rst <- brkga::nonlinear_brkga(n = 5)
rst
sum(rst$point*1:5)
library(brkga)
library(brkga)
func_cpp <- cppXPtr(.beta_rega, depends = "RcppArmadillo")
library(RcppXPtrUtils)
func_cpp <- cppXPtr(.beta_rega, depends = "RcppArmadillo")
.beta_rega <- 'SEXP reg_beta(const std::vector< double >& X, const arma::mat& data){
//Definindo vetor eta; eta = mX*vb (produto de matriz por vetor)
int n_rows = data.n_rows;
int n_cols = data.n_cols; // usar o N
arma::vec x = arma::conv_to<arma::vec>::from(X);
arma::vec resp_var = data.col(0);
arma::mat model_mat = arma::join_rows(arma::ones<arma::vec>(n_rows,1), data.cols(1, n_cols - 1));
arma::vec eta = model_mat*x.rows(0,x.size()-2);
arma::vec mu = arma::exp(eta)/(arma::exp(eta) + 1);
double phi = x[x.size()-1];
arma::vec temp = arma::lgamma(mu*phi) - arma::lgamma((1-mu)*phi) + (mu*phi - 1)%arma::log(resp_var) + (((1-mu)*phi ) - 1)%arma::log(1 - resp_var);
const double f  = n_rows*lgamma(phi) + arma::sum(temp);
return(Rcpp::wrap(f));
}'
func_cpp <- cppXPtr(.beta_rega, depends = "RcppArmadillo")
dados <- matrix(runif(1000), ncol = 4)
brkga::nl_brkga(func_ = func_cpp,
lowerLimit = rep(-2, 5),
upperLimit = rep(2, 5),
K = 3,
p = 100,
data = dados,
X_INTVL = 5,
MAX_GENS = 100)
dados <- matrix(runif(100), ncol = 4)
brkga::nl_brkga(func_ = func_cpp,
lowerLimit = rep(-2, 5),
upperLimit = rep(2, 5),
K = 3,
p = 100,
data = dados,
X_INTVL = 5,
MAX_GENS = 100)
