IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
S <- dm[c(tour, nontour), c(tour, nontour)]
G <- S %*% matrix(c(rep(1,50), rep(0,450)), ncol = 1)
IM <- S[tour, nontour]
IM1 <- apply(IM, 2, function(x){-x - G[1:50]})
IM2 <- apply(IM1, 1, function(x){x + G[51:500]})
gtz <- as_tibble(which(IM2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {IM2[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
getTourFitness(tour-1, dm)
7.754362e+05
(7.754362e+05 - getTourFitness(tour-1, dm))
(7.754362e+05 - getTourFitness(tour-1, dm))/7.754362e+05
library(tidyverse)
distances <- c(0, 1, 1, 1, 1, 4, 2, 1,
1, 0, 3, 3, 3, 2, 1, 1,
1, 3, 0, 4, 2, 2, 1, 2,
1, 3, 4, 0, 3, 3, 2, 1,
1, 3, 2, 3, 0, 1, 2, 3,
4, 2, 2, 3, 1, 0, 3, 1,
2, 1, 1, 2, 2, 3, 0, 1,
1, 1, 2, 1, 3, 1, 1, 0) %>% matrix(nrow = 8, byrow = TRUE)
tour <- c(1, 2, 3)
nontour <- setdiff(1:8, tour)
v <- matrix(c(rep(1,3), rep(0,5)), ncol = 1)
M <- distances[c(tour, nontour), c(tour, nontour)]
M
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
G
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[51:5]})
M[tour, nontour]
G[1:3]
M[tour, nontour]
M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]})
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:5]})
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]})
R
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
R
as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}))
OutIn <- gtz %>% top_n(1, delta)
OutIn
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
cat("Fitness: ", sum(distances[tour, tour])/2)
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = delta/max(delta))
gtz
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/(1+max(delta))) # +1 to allow zero delta a change
gtz
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta))) # +1 to allow zero delta a change
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta))
gtz
sum(gtz$prob)
?sample_n()
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
gtz
distances <- c(0, 1, 1, 1, 1, 4, 2, 1,
1, 0, 3, 3, 3, 2, 1, 1,
1, 3, 0, 4, 2, 2, 1, 2,
1, 3, 4, 0, 3, 3, 2, 1,
1, 3, 2, 3, 0, 1, 2, 3,
4, 2, 2, 3, 1, 0, 3, 1,
2, 1, 1, 2, 2, 3, 0, 1,
1, 1, 2, 1, 3, 1, 1, 0) %>% matrix(nrow = 8, byrow = TRUE)
tour <- c(1, 2, 3)
nontour <- setdiff(1:8, tour)
v <- matrix(c(rep(1,3), rep(0,5)), ncol = 1)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
cat("Fitness: ", sum(distances[tour, tour])/2)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
distances <- c(0, 1, 1, 1, 1, 4, 2, 1,
1, 0, 3, 3, 3, 2, 1, 1,
1, 3, 0, 4, 2, 2, 1, 2,
1, 3, 4, 0, 3, 3, 2, 1,
1, 3, 2, 3, 0, 1, 2, 3,
4, 2, 2, 3, 1, 0, 3, 1,
2, 1, 1, 2, 2, 3, 0, 1,
1, 1, 2, 1, 3, 1, 1, 0) %>% matrix(nrow = 8, byrow = TRUE)
tour <- c(1, 2, 3)
nontour <- setdiff(1:8, tour)
v <- matrix(c(rep(1,3), rep(0,5)), ncol = 1)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
aux <- tour[OutIn$col]
tour[OutIn$col] <- nontour[OutIn$row]
nontour[OutIn$row] <- aux
cat("Fitness: ", sum(distances[tour, tour])/2)
cat("Fitness: ", M(distances[tour, tour])/2)
distances <- c(0, 1, 1, 1, 1, 4, 2, 1,
1, 0, 3, 3, 3, 2, 1, 1,
1, 3, 0, 4, 2, 2, 1, 2,
1, 3, 4, 0, 3, 3, 2, 1,
1, 3, 2, 3, 0, 1, 2, 3,
4, 2, 2, 3, 1, 0, 3, 1,
2, 1, 1, 2, 2, 3, 0, 1,
1, 1, 2, 1, 3, 1, 1, 0) %>% matrix(nrow = 8, byrow = TRUE)
tour <- c(1, 2, 3)
nontour <- setdiff(1:8, tour)
v <- matrix(c(rep(1,3), rep(0,5)), ncol = 1)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
gtz
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
R
tour
nontour
OutIn$col
tour[OutIn$row]
aux <- tour[OutIn$row]
nontour[OutIn$col]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
tour
nontour
cat("Fitness: ", M(distances[tour, tour])/2)
cat("Fitness: ", sum(distances[tour, tour])/2)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
aux <- tour[OutIn$row]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
cat("Fitness: ", sum(distances[tour, tour])/2)
OutIn
tour
nontour
R
M
M[tour, nontour]
G
M
gtz
M[tour, nontour]
distances <- c(0, 1, 1, 1, 1, 4, 2, 1,
1, 0, 3, 3, 3, 2, 1, 1,
1, 3, 0, 4, 2, 2, 1, 2,
1, 3, 4, 0, 3, 3, 2, 1,
1, 3, 2, 3, 0, 1, 2, 3,
4, 2, 2, 3, 1, 0, 3, 1,
2, 1, 1, 2, 2, 3, 0, 1,
1, 1, 2, 1, 3, 1, 1, 0) %>% matrix(nrow = 8, byrow = TRUE)
tour <- c(1, 2, 3)
nontour <- setdiff(1:8, tour)
v <- matrix(c(rep(1,3), rep(0,5)), ncol = 1)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
G
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
R
M[tour, nontour]
M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]})
[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
aux <- tour[OutIn$row]
aux
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
tour
nontour
cat("Fitness: ", sum(distances[tour, tour])/2)
M <- distances[c(tour, nontour), c(tour, nontour)]
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
G
R <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
R
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
gtz
gtz
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
tour
aux <- tour[OutIn$row]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
tour
nontour
cat("Fitness: ", sum(distances[tour, tour])/2)
cat("Fitness: ", sum(M[tour, tour])/2)
distances[tour, tour]
tour
OutIn
distances <- c(0, 1, 1, 1, 1, 4, 2, 1,
1, 0, 3, 3, 3, 2, 1, 1,
1, 3, 0, 4, 2, 2, 1, 2,
1, 3, 4, 0, 3, 3, 2, 1,
1, 3, 2, 3, 0, 1, 2, 3,
4, 2, 2, 3, 1, 0, 3, 1,
2, 1, 1, 2, 2, 3, 0, 1,
1, 1, 2, 1, 3, 1, 1, 0) %>% matrix(nrow = 8, byrow = TRUE)
tour <- c(1, 2, 3)
nontour <- setdiff(1:8, tour)
v <- matrix(c(rep(1,3), rep(0,5)), ncol = 1)
M <- distances[c(tour, nontour), c(tour, nontour)]
colnames(M) <- c(tour, nontour)
colnames(M)
rownames(M) <- c(tour, nontour)
M
cat("Fitness: ", sum(distances[tour, tour])/2)
G <- M %*% v
G
R
colnames(R) <- c(nontour)
rownames(R) <- c(tour)
R
gtz <- as_tibble(which(R >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
gtz
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
aux <- tour[OutIn$row]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
M[c(tour, nontour), c(tour, nontour)]
M
nontour
M2 <- M[c(tour, nontour), c(tour, nontour)]
M2
sum(M2[1:3.1:3])
sum(M2[1:3,1:3])
sum(M2[1:3,1:3])/2
cat("Fitness: ", sum(distances[tour, tour])/2)
distances[tour, tour]
M2[1:3, 1:3]
M2
cat("Fitness: ", sum(distances[tour, tour])/2)
G2 <- M2 %*% v
G2
R2 <- M[tour, nontour] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
colnames(R2) <- c(nontour)
rownames(R2) <- c(tour)
R2
M2[1:3, 4:8]
M2[1:3, 4:8] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
R2 <- M2[1:3, 4:8] %>%
apply(2, function(x){-x - G[1:3]}) %>%
apply(1, function(x){x + G[4:8]}) %>% t
R2
gtz <- as_tibble(which(R2 >= 0, arr.ind = TRUE)) %>%
mutate(delta = apply(., 1, function(x) {R2[x[1], x[2]]}),
prob = (delta+1)/sum(1+delta)) # +1 to allow zero delta a change
gtz
R2
OutIn <- gtz %>% sample_n(1, weight = prob)
OutIn
tour[OutIn$row]
nontour[OutIn$col]
aux <- tour[OutIn$row]
tour[OutIn$row] <- nontour[OutIn$col]
nontour[OutIn$col] <- aux
tour
nontour
#colnames(M2) <- c(tour, nontour)
#rownames(M2) <- c(tour, nontour)
cat("Fitness: ", sum(distances[tour, tour])/2)
